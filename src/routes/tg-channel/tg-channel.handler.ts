import { connectApi } from '~/lib/openai';
import { Message, PostCreateSchema } from './tg-channel.types';
import { hashText, mdToHtml, substitute } from '~/utils/string';
import { db } from '~/db';
import { guinnessTopicsTable } from '~/db/schema';
import { desc } from 'drizzle-orm';
import { connectTgApi } from '~/lib/tg-api';

export const MAX_TEMPLATES_COUNT = 5;

export const guinnessHeaderTexts = {
  [0]: {
    title:
      'ü•≥ –ü–æ–µ—Ö–∞–ª–∏! –°—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—É—é —Ä—É–±—Ä–∏–∫—É ‚Äî —Å–∞–º—ã–µ –±–µ–∑—É–º–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã Guinness!',
    subtitle: '–ò –ø–µ—Ä–≤—ã–º –±—É–¥–µ—Ç: <b>{{title}}</b>',
  },
  [1]: {
    title: 'üöÄ –ô–æ! –°–Ω–æ–≤–∞ –≤ —ç—Ñ–∏—Ä–µ –ø–æ–¥–±–æ—Ä–∫–∞ —Å–∞–º—ã—Ö –¥–∏–∫–∏—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤ Guinness!',
    subtitle: '–°–µ–≥–æ–¥–Ω—è –≤ —Ä—É–±—Ä–∏–∫–µ: <b>{{title}}</b>',
  },
  [2]: {
    title: 'üòú –°–∫—É—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç ‚Äî —É –Ω–∞—Å –Ω–æ–≤—ã–π –±–µ–∑—É–º–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ Guinness!',
    subtitle: '–°–µ–≥–æ–¥–Ω—è –≤ —Ä—É–±—Ä–∏–∫–µ: <b>{{title}}</b>',
  },
  [3]: {
    title:
      'üèÜ –°–µ–≥–æ–¥–Ω—è –≤ —Ä—É–±—Ä–∏–∫–µ Guinness World Records ‚Äî —á—Ç–æ-—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ–æ–±—ã—á–Ω–æ–µ!',
    subtitle: '–†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ä–µ–∫–æ—Ä–¥: <b>{{title}}</b>',
  },
  [4]: {
    title: 'ü§Ø –ï—â—ë –æ–¥–∏–Ω —Å—É–º–∞—Å—à–µ–¥—à–∏–π —Ä–µ–∫–æ—Ä–¥ Guinness –ø–æ–¥–ª–µ—Ç–µ–ª –≤ –Ω–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!',
    subtitle: '–°–µ–≥–æ–¥–Ω—è –≤ —Ä—É–±—Ä–∏–∫–µ: <b>{{title}}</b>',
  },
  [5]: {
    title: '–•—ç–π! üôå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—É–±—Ä–∏–∫—É –±–µ–∑—É–º–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã Guinness!',
    subtitle: '–°–µ–≥–æ–¥–Ω—è –≤ —Ä—É–±—Ä–∏–∫–µ: <b>{{title}}</b>',
  },
} as const;

export const guinnessFooterTexts = {
  [0]: {
    title: '–ï—Å–ª–∏ —Ä—É–±—Ä–∏–∫–∞ –Ω–∞–±–µ—Ä–µ—Ç –º–∏–ª–ª–∏–æ–Ω –ª—É—Ü–∫–æ–≤ —Ç–æ –º—ã –µ—ë –ø—Ä–æ–¥–æ–ª–∂–∏–º',
    subtitle: '(—à—É—Ç–∫–∞. –æ–Ω–∞ –∏—Ç–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è üòà)',
  },
  [1]: {
    title: '–ê –≤—ã —Å–º–æ–≥–ª–∏ –±—ã –ø–æ–±–∏—Ç—å —Ç–∞–∫–æ–π —Ä–µ–∫–æ—Ä–¥?',
    subtitle: '–ù–∞–¥–æ –±—ã—Ç—å –µ—â–µ —Ç–µ–º –∑–∞–¥—Ä–æ—Ç–æ–º)',
  },
  [2]: {
    title: '–ö–∞–∂–µ—Ç—Å—è, –≥—Ä–∞–Ω–∏—Ü –¥–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Ñ–∞–Ω—Ç–∞–∑–∏–∏ –Ω–µ—Ç!',
    subtitle: '',
  },
  [3]: {
    title: '–ï—â—ë –æ–¥–∏–Ω —à—Ç—Ä–∏—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –º–∏—Ä–æ–≤—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤!',
    subtitle: '',
  },
  [4]: {
    title: '–ú–∏—Ä –ø–æ–ª–æ–Ω —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∏ —ç—Ç–æ –ª–∏—à—å –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö.',
    subtitle: '',
  },
  [5]: {
    title: '–ü–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö, –∫–∞–∫–æ–π —Ä–µ–∫–æ—Ä–¥ –≤–ø–µ—á–∞—Ç–ª–∏–ª –±—ã –≤–∞—Å –±–æ–ª—å—à–µ!',
    subtitle: '',
  },
} as const;

type TemplateKey = keyof typeof guinnessHeaderTexts;

async function createGuinnessPost() {
  const promptsIds = {
    prepare: 'pmpt_68a1c1dd89a08194b42be9fbd12eea7d048819d8e13503c5',
  };
  const openai = connectApi();

  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–≤–∞–Ω–∏–µ –≥–∏–Ω–Ω–µ—Å —Ä–µ–∫–æ—Ä–¥–∞
  const prepareRes = await openai.responses.create({
    prompt: {
      id: promptsIds.prepare,
      version: '3',
    },
  });
  const raw = prepareRes.output[0] as Message;

  const newTitleRecord = raw.content[0].text;
  const hash = hashText(raw.content[0].text);
  // const text = '–ü—Ä–∏–º–µ—Ä —Ä–µ–∫–æ—Ä–¥–∞ –≥–∏–Ω–µ—Å–∞9';
  // const hash = hashText(text);

  const lastTopic = db
    .select({ templateKey: guinnessTopicsTable.templateKey })
    .from(guinnessTopicsTable)
    .orderBy(desc(guinnessTopicsTable.createdAt))
    .limit(1)
    .get();

  // –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
  let newTemplateKey = lastTopic ? lastTopic.templateKey : 0;
  if (lastTopic) {
    const tmpKey = lastTopic.templateKey + 1;
    if (lastTopic.templateKey > 0 && tmpKey <= 5) {
      newTemplateKey = tmpKey;
    } else {
      newTemplateKey = 1;
    }
  }

  const result = await db
    .insert(guinnessTopicsTable)
    .values({
      title: newTitleRecord,
      hash,
      templateKey: newTemplateKey,
    })
    .onConflictDoNothing();

  // —Å–æ–∑–¥–∞–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ, –∑–Ω–∞—á–∏—Ç —Ç–∞–∫–æ–π –≥–∏–Ω–Ω–µ—Å —Ä–µ–∫–æ—Ä–¥ —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ –∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π
  if (!result.changes) {
    console.warn('[Guinness] Duplicate:', { text: newTitleRecord, hash });
    console.debug('–í—ã–∑–æ–≤ —Ä–µ–∫—É—Ä—Å–∏–∏... ');
    return await createGuinnessPost();
  }

  console.debug('[Guinness] New record:', { text: newTitleRecord, hash });

  const prompts = [
    `Detail Guinness record: "${newTitleRecord}". Start catchy (1‚Äì2 lines). Describe what, who, when/where. Add 1‚Äì2 facts. Max 4 paras, light style, emojis ok. In Russian.`,
    `Short story for TG about Guinness record: "${newTitleRecord}". Start with "Did you know‚Ä¶" (1 para. In russian). Say who+when+how. End with joke/note, emojis ok. 2‚Äì3 paras. In Russian.`,
    `TG fact-post about Guinness record: "${newTitleRecord}". 1st line: title+emoji. 2nd: 1 sentence what/who/where. 3rd: fact or number. Max 5 lines. In Russian.`,
  ];

  // —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
  const idx = Math.floor(Math.random() * prompts.length);
  const prompt = prompts[idx];
  console.debug('[choosen prompt index]', idx);

  const createPostRes = await openai.responses.create({
    model: 'gpt-4o-mini',
    input: prompt,
    temperature: 0.4,
  });

  const rawNewPost = createPostRes.output[0] as Message;
  const newPostText = rawNewPost.content[0].text;
  console.debug('newPostText', newPostText);

  // –§–æ—Ä–º–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
  const template = `
  üöÄ <b>${guinnessHeaderTexts[newTemplateKey as TemplateKey].title}</b>

  ${substitute(guinnessHeaderTexts[newTemplateKey as TemplateKey].subtitle, {
    title: newTitleRecord,
  })}

  ${newPostText}
  `;

  const tg = await connectTgApi();
  // test_marunova
  await tg.sendMessage('test_marunova', {
    message: mdToHtml(template),
    parseMode: 'html',
  });

  return template;
}

export async function createPost(body: PostCreateSchema) {
  try {
    if (body.topic === 'guinness') {
      return await createGuinnessPost();
    }
    return;
  } catch (err) {
    console.error(err);
    throw err;
  }
}
